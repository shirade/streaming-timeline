/***
  General modules here
  request - To use the same cookie in the other request, set option {jar: true}
***/
var request = require('request').defaults({jar: true});
var fs = require('fs');
var qs = require('querystring');
var path = require('path');
var assert = require('assert');
var async = require('async');
var http = require('http');
var debug = require('debug')('test.server');
var exec = require('child_process').exec;

/***
  Shortcuts command and global variables which are necessary to do test
***/
var rootPath = path.join(__dirname, '..');
var server;

/***
  obj which include enviromental variables
***/
var env = {
  id: process.env['TWITTER_USER_ID'],
  consumer_key: process.env['TWITTER_CONSUMER_KEY'],
  consumer_secret: process.env['TWITTER_CONSUMER_SECRET'],
  token: process.env['TWITTER_TOKEN_KEY'],
  token_secret: process.env['TWITTER_TOKEN_SECRET']
}

/***
  For using Twitter RESTful API by 'request' module
***/
var oauth = {
  id: env.id,
  consumer_key: env.consumer_key,
  consumer_secret: env.consumer_secret,
  token: env.token,
  token_secret: env.token_secret
};


/***
  Test user data which will be stored into session store
***/
var user = {
  id: env.id,
  name: 'test user',
  screen_name: 'test user',
  token: env.token,
  tokenSecret: env.token_secret
};

/***
  profile data shich will be used for twitter strategy
***/
var profile = {
  id: env.id,
  displayName: 'TEST USER',
  username: 'TEST USER',
  token: env.token,
  tokenSecret: env.token_secret
};

/***
  store session info with session id and token and token secret
***/
function setSession (response, callback) {
  var sid = server.getSID({handshake:{headers:{cookie:response.request.headers.cookie}}});
  server.redisStore.set(sid, {cookie: {expires: null}, passport: {user: user}}, callback);
};

/***
  The followings are test codes of index.js
***/
describe('Test of server.js - server', function () {
  before(function (done) {
    server = require(path.join(rootPath, 'lib', 'server'));
    server.httpd.listen(3000);
    done();
  });

  describe('unit test', function () {
    it('function - trimTweet', function (done) {
      var now = Date();
      var tweet = {
        created_at: now,
        id:1,
        text:'1',
        user: {
          id: 1,
          name: '1',
          screen_name: '1',
          profile_image_url: 'dummyURL'
        }
      };
      assert.deepEqual(server.trimTweet(tweet), tweet);
      done();
    });

    it('function - trimTweet fails since tweet doesn\'t have id property', function (done) {
      var now = Date();
      var tweet = {
        created_at: now,
        text:'1',
        user: {
          id: 1,
          name: '1',
          screen_name: '1',
          profile_image_url: 'dummyURL'
        }
      };
      assert.deepEqual(server.trimTweet(tweet), null);
      done();
    });

    it('function - getSID', function (done) {
      var dummySocket = {
        handshake: {
          headers: {
            cookie: 'connect.sid=s:abcdefghijklmn.123456789'
          }
        }
      };
      assert.deepEqual(server.getSID(dummySocket), 'abcdefghijklmn');
      done();
    });

    it('object - twitterStrategy', function (done) {
      function dummy (arg1, arg2) {
        assert.strictEqual(arg1, null);
        assert.strictEqual(arg2.id, profile.id);
        assert.strictEqual(arg2.name, profile.displayName);
        assert.strictEqual(arg2.screen_name, profile.username);
        assert.strictEqual(arg2.token, profile.token);
        assert.strictEqual(arg2.tokenSecret, profile.tokenSecret);
        done();
      };
      server.twitterStrategy._verify(oauth.token, oauth.token_secret, profile, dummy);
    });
  });

  describe('normal cases', function () {
    it('/ - should return index.html generated by jade', function (done) {
      request.get('http://localhost:3000/', function (error, response, body) {
        if (error) console.error(error);
        assert.strictEqual(response.statusCode, 200);
        var command = path.join(__dirname, '..', 'node_modules', '.bin', 'jade')
        + ' ' + path.join(__dirname, '..', 'views', 'index.jade')
        + ' -o ' + path.join(__dirname, '..', 'test', 'html');
        exec(command,
          function (error, stdout, stderr) {
            if (error !== null) {
              console.log('exec error: ' + error);
            } else {
              var html = fs.readFileSync(path.join(rootPath, 'test', 'html', 'index.html'));
              assert.equal(body, html.toString());
              done();
            }
        });
      });
    });

    it('/home - should return statusCode 401', function (done) {
      request.get({url: 'http://localhost:3000/home'}, function (error, response, body) {
        if(error) console.error(error);
        assert.strictEqual(response.statusCode, 200);
        var html = fs.readFileSync(path.join(rootPath, 'test', 'html', 'index.html'));
        assert.equal(body, html.toString());
        setSession(response, function (error) {
          done();
        });
      });
    });

    it('/oauth/twitter/auth - should return statusCode 200 and twitter auth page', function (done) {
      this.timeout(10 * 1000);
      request.get('http://localhost:3000/twitter_oauth', function (error, response, body) {
        if (error) console.error(error);
        assert.strictEqual(response.statusCode, 200);
        done();
      });
    });

    it('/home - should return statusCode 200 and home.html generated by jade', function (done) {
      request.get({url: 'http://localhost:3000/home'}, function (error, response, body) {
        if(error) console.error(error);
        assert.strictEqual(response.statusCode, 200);
        var command = path.join(__dirname, '..', 'node_modules', '.bin', 'jade')
        + ' ' + path.join(__dirname, '..', 'views', 'home.jade')
        + ' -o ' + path.join(__dirname, '..', 'test', 'html');
        exec(command,
          function (error, stdout, stderr) {
            if (error !== null) {
              console.log('exec error: ' + error);
            } else {
              var html = fs.readFileSync(path.join(rootPath, 'test', 'html', 'home.html'));
              assert.equal(body, html.toString());
              done();
            }
        });
      });
    });

    it('/logout, should return statusCode 200 and redirect /', function (done) {
      request.get('http://localhost:3000/logout', function (error, response, body) {
        if (error) console.error(error);
        assert.strictEqual(response.statusCode, 200);
        var html = fs.readFileSync(path.join(rootPath, 'test', 'html', 'index.html'));
        assert.strictEqual(body, html.toString());
        done();
      });
    });

    it('/css/twitter.css, should return content of twitter.css', function (done) {
      request.get('http://localhost:3000/css/twitter.css', function (error, response, body) {
        if (error) console.error(error);
        assert.strictEqual(response.statusCode, 200);
        var css = fs.readFileSync(path.join(rootPath, 'public', 'css', 'twitter.css'));
        assert.strictEqual(body, css.toString());
        done();
      });
    });
  });

  describe('abnormal cases', function () {
    it('/get, should returns 404 not found', function (done) {
      request.get('http://localhost:3000/get', function (error, response, body) {
        if (error) console.error(error);
        assert.strictEqual(response.statusCode, 404);
        assert.strictEqual(body, 'Not Found');
        done();
      });
    });

    it('/post, should returns 400 bad request', function (done) {
      request.post('http://localhost:3000/post', function (error, response, body) {
        if (error) console.error(error);
        assert.strictEqual(response.statusCode, 405);
        assert.strictEqual(body, 'Method Not Allowed');
        done();
      });
    });

    it('/put, should returns 400 bad request', function (done) {
      request.put('http://localhost:3000/put', function (error, response, body) {
        if (error) console.error(error);   
        assert.strictEqual(response.statusCode, 405);
        assert.strictEqual(body, 'Method Not Allowed');
        done();
      });
    });

    it('/delete, should returns 400 bad request', function (done) {
      request.del('http://localhost:3000/delete', function (error, response, body) {
        if (error) console.error(error);
        assert.strictEqual(response.statusCode, 405);
        assert.strictEqual(body, 'Method Not Allowed');
        done();
      });
    });
  });

  describe('socketio test', function () {
    var socket, tweetId, client, myAgent, expectedTweets;
    before(function (done) {
      request.get({url: 'http://localhost:3000/home'}, function (error, response, body) {
        if(error) console.error(error);
        cookie = response.request.headers.cookie;
        setSession(response, function (error) {
          myAgent = new http.Agent();
          myAgent._addRequest = myAgent.addRequest;
          myAgent.addRequest = function(req, host, port, localAddress) {
            var old = req._headers.cookie;
            req._headers.cookie = cookie + (old ? '; ' + old : '');
            req._headerNames['cookie'] = 'Cookie';
            return myAgent._addRequest(req, host, port, localAddress);
          };
          client = require('socket.io-client');
          socket = client.connect('http://localhost:3000', { agent: myAgent});
          socket.on('connect', function () {
            var url = 'https://api.twitter.com/1.1/statuses/home_timeline.json?count=5';
            request.get({url:url, oauth:oauth, json:true}, function (error, response, body) {
              // expextedTweets to be used later to confirm expected tweet is fetch from server
              if (error) console.error(error);
              expectedTweets = Array.isArray(body) ? body.map(server.trimTweet) : [];
              done();
            });
          });
        });
      });
    });

    it('socket.on("init") should return recent 5 tweets', function (done) {
      this.timeout(5 * 1000);
      socket.on('init', function (tweets) {
        assert.deepEqual(tweets, expectedTweets);
        done();
      });
    });

    it('socket.on("supplemental tweet") should return supplemental tweet', function (done) {
      this.timeout(5 * 1000);
      socket.emit('supplemental tweet');
      socket.on('supplemental tweet', function (tweet){
        assert.deepEqual(tweet, expectedTweets[4]);
        done();
      });
    });

    it('socket.on("new tweet") should return new tweet info', function (done) {
      this.timeout(5 * 1000);
      var text = 'test tweet';
      socket.on('new tweet', function (tweet){
        assert.equal(tweet.text, text);
        assert.equal(tweet.user.id, user.id);
        done();
      });
      var url = 'https://api.twitter.com/1.1/statuses/update.json?';
      url += qs.stringify({status: text, trim_user: true});
      request.post({url:url, oauth:oauth, json:true}, function (error, response, tweet) {
        tweetId = tweet.id_str;
      });
    });

    it('socket.on("delete tweet") should get deleted tweet info', function (done) {
      this.timeout(5 * 1000);
      socket.on('delete tweet', function (tweet){
        assert.equal(tweet.id, tweetId);
        assert.equal(tweet.user_id, user.id);
        done();
      });
      var url = 'https://api.twitter.com/1.1/statuses/destroy/' + tweetId + '.json?trim_user=true';
      request.post({url:url, oauth:oauth, json:true}, function (error, response, tweet) {
      });
    });

    it('socket.disconnect() should execute disconnect event of server side', function (done) {
      socket.disconnect();
      done();
    });
  });

  after(function (done) {
    process.exit();
    done();
  });
});